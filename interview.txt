-------------------------------------------------------------------------------
1. What initially motivated you to create Gura-lang? Were you trying to solve a specific problem, or exploring a new idea in language design?

グラフ描画ソフトを作ろうとしたことがきっかけです。gnuplot などの著名なソフトは知っていましたし、自分でも使っていましたが、数式の形式で微分操作などを行えるものが欲しかったのです。
簡易的なスクリプト言語を提供し、関数の定義や変数の管理ができるようなものを構想しました。このとき、例えば y = sin(x) という式を定義して、これをプロットすることを考えます。
プログラムの内部で x に適切な範囲、間隔の数値を生成して y を計算しながらプロットをすればよいのですが、
引数 x として配列などの複数の値を受け取れるようにして、それぞれの値の結果をこれもまた配列で返すようにできれば、言語としての汎用性が高まると考えました。これが暗黙的マッピングのスタート地点です。

-------------------------------------------------------------------------------
2. Gura-lang is described as an iteration-oriented language. Could you explain why you consider iteration such a central concept?

数値や文字列、またはそれらの組み合わせである構造体などのデータの集合に何らかの処理を施すために、多くの言語では for や while などの構文を使ってアルゴリズム的な解決を図ります。
しかし、データ集合をイテレータというデータ構造で表現すると、この繰り返し処理をずっとシンプルな表現で行うことができます。
このことは、近年盛んな機械学習というアプローチにおいて有効に働きます。
大量のデータをその学習目的にあわせた形にしてコンピュータに入力する際、イテレータを使うとこの学習プロセスをより効率的に実装できると思うからです。

-------------------------------------------------------------------------------
3. When you started developing Gura-lang, were you aware that similar ideas had appeared in languages like Icon or APL? How do you see Gura’s place in that lineage?

Gura の開発を始めたとき、世の中にあるプログラミング言語についてはメジャーな 10 種類ほどの言語の他はほとんど何も知りませんでした。
リストや配列といったデータ集合を一括して処理するという Gura と同じようなアプローチをしているものがあることを知ったのは、開発を始めてから 1 年ほどたってからです。
ですから、Gura で「暗黙的マッピング」や「メンバマッピング」と呼んでいるこれらのアイデアは、私の中では完全にオリジナルで、系譜をひくものはありません。

言語の文法については、TypeScript を意識しています。これは、私が普段使っている C++ に文法が近くてなじみやすかったからです。

もともと、暗黙的マッピングなどの機能は、これら既存の言語を拡張して実装することを考えていました。すでにあるライブラリ資源などをそのまま使えるからです。
ですが、この機能は関数呼び出しという言語の中枢にかかわるもので、言語そのものを変えなければ実現できないことに気が付きました。
大きな労力が必要なことは予想できましたが、自分のアイデアの実現と、新たな言語作成という興味に駆られて開発を開始しました。

-------------------------------------------------------------------------------
4. Gura-lang supports Implicit Mapping and Member Mapping. Could you explain how these mapping mechanisms (implicit and member mapping) affect performance, memory usage, or readability
  compared with explicit loops or comprehensions in other languages?

これらの機能を使うと、通常の関数呼び出しや演算表記で自動的に繰り返し処理が行われるので、for などの構文が不要になります。これは、可読性の面での大きなメリットです。

また、繰り返し処理がイテレータというデータ内に内包されるという点も重要です。for などを使った明示的な繰り返し処理では、その処理によって外部に副作用を与えるのか、
また逆に外部から作用を受けるのかを把握することが困難です。しかし、イテレータという形をとれば、そのイテレータ内の処理とそれ以外の処理との関わりが明確になります。
もしイテレータ内の処理が、例えば固定のデータ列を受け取ってなんらかの演算や加工をした結果を生成するというような、外部との関わりを持たないものならば、
並列処理が可能になり、パフォーマンスに大きく貢献するでしょう。

メモリ効率については、この機能を使って向上させることはできないと考えています。処理内容によりますが、繰り返し処理で生成したデータをメモリに保存する必要もあるので、
逆に消費量が増えるかもしれません。ですが、コンピュータのハードウェア環境を鑑みると、CPU の速度が限界を迎えているのとは対照的に、使用可能なメモリの容量は飛躍的に増えています。
むしろ、メモリを大量に使ってパフォーマンスを向上させるアプローチが今後さらに発展していくのではないでしょうか。

-------------------------------------------------------------------------------
5. Nearly a decade later, parallel and concurrent computing have become more accessible — even in scripting environments.
How do you see this evolution today, and do you think languages like Gura-lang (or Gurax) are still well-positioned to leverage this paradigm?

おっしゃるとおり、GPU や量子コンピューティングなど、処理を並列化してパフォーマンスを上げる試みが盛んです。
ただ、多くの言語では、プログラマが明示的に複数のスレッドを作ることで並列化プログラミングを実現しています。
スレッドを複数走らせれば、資源の競合管理などが必要になり、プログラムが非常に複雑になります。これは実にナンセンスです。
多くのプログラマは、プログラムを並列で実行すること自体に興味があるわけではなく、単にプログラムの実行パフォーマンスを上げたいだけですから。
今までと同じプログラミングアプローチをとることができ、処理の並列化などはプログラマから隠ぺいされていることが理想的です。

暗黙的マッピングはこの課題に対する提案の一つになり得ます。イテレータの形でデータ表現をしておいて暗黙的マッピングをかければ、
見た目は通常の関数呼び出しや演算処理ですが、スクリプトが自動的に判断してバックグラウンド処理をすることができます。
つまり、イテレータを複数生成すれば、並列処理が自動的に行われることになります。

ただ私自身、並列処理の知識がほとんどありません。また実装自体も困難になるでしょうから、一人だけで解決できる範疇を超えるように思えます。
ですから、上に書いたことは夢物語です。でも、実現したい欲求に強く駆られることもしばしばです。

-------------------------------------------------------------------------------
6. Have you considered extending Gura-lang (or Gurax) to interact with other ecosystems (for example, embedding it as a scripting language within other applications, similar to Lua)?

もともとグラフ描画ソフトのスクリプト言語として開発を始めたので、他のアプリケーションへの組込みは常に意識していました。

過去にハードウェア設計会社に勤めていたことがあり、そこでデジタル信号波形のドローイングソフトを作りました。
そのプログラムに Gura を組み込んで、スクリプトによってパルスパターンの描画などを自動化できるようにしたのですが、これがとてもうまく機能しました。
この開発過程を通じてアプリ組込み用途で Gura を活用できる手ごたえを感じました。

また、ワンボードマイコンへの応用も考えています。今、Raspberry Pi Pico というマイコンにいろいろなハードウェアを接続できる pico-jxgLABO というプラットフォームを開発しているのですが、
ハードウェアを手軽に制御するためのスクリプト言語が欲しくなることがあります。Gura はパーサが非常に簡素にできていますし、私一人で作ったものなので処理内容はすべて把握しています。
メモリ管理の部分さえマイコン用に作ることができれば、Pythono のマイコン版である MicroPython のような、MicroGura が可能かもしれません。

-------------------------------------------------------------------------------
7. You later began working on Gurax. Is it a successor to Gura-lang or a complete redesign? What are the main differences between the two?

はい、Gurax は Gura の後継言語です。Gura はプログラムを構文解析木の形で実行しています。これは実装は容易になるのですが、実行パフォーマンスを高くすることが困難です。
また、実行コンテキストが C++ のものになってしまうことも問題でした。具体的には、例えば Gura プログラム内で関数呼び出しをした場合でも、内部では C++ の関数呼び出しのメカニズムを使うことになります。
これですと、C++ コンパイラが確保した限られたスタックメモリ領域を消費することになり、再帰呼び出しなどを行うとすぐにスタックオーバーフローを起こします。

Gurax は、この問題を解決するため、専用インストラクションコードを実行する仮想マシンを実装しました。データ管理や演算、プログラム分岐やジャンプなどを行うインストラクションを用意し、
スクリプトプログラムをこういったインストラクション列にコンパイルするようにしたのです。これによってパフォーマンスは Gura の 2 倍程度に改善されました。
でも私が一番うれしかったのは、再帰呼び出しをしてもスタックオーバーフローを起こさなくなったことです。関数呼び出しなどの機構も仮想マシン上で行いますから、スタック管理も独自のものになり、
これでようやく C++ の縛りを逃れられたと思いました。

Gurax は Gura の後継ではありますが、ほとんどスクラッチから作りなおしました。Gura の開発は、既存のコードに機能追加をしていったので、非効率な実装が多く見られたからです。
その際、言語が提供する API のネーミングコンベンションを snake case から camel case に変更しました。Gura は Python の実装を強く意識して作成したので、関数の命名などもそれに倣っています。
snake case を使ったのはその影響ですが、私自身は camel case を普段の開発に使っているので、自分の嗜好に正直になろうと思ったのが動機です。 

-------------------------------------------------------------------------------
8. Have you seen other people or projects using Gura-lang outside your own tools, such as Gura Shot or Getter Photo?

他の方が Gura でプログラムを作ったという話は聞いたことがありません。とても残念です。

そう、Gura Shot! これに言及してくれたことはとてもうれしいです。Gura Shot は、Gura 言語が実用的なプロジェクトに使えることを実証するために作成したアプリケーションで、
これを通じて Gura というプログラミング言語を多くの人に知ってもらいたいという思惑もありました。

実際、Gura Shot は日本の大手フリーソフトサイトで紹介され、多くの人に使われるヒット作品になりました。そのサイト以外でもフリーソフトを紹介するムックなどにも多く掲載され、
ダウンロード数はかなりの数に上ったと思います。具体的なアクセス件数は調べなかったので、ここで数値を挙げることはできないのですが...。

でも、アプリケーションの人気とは裏腹に、それを動かしているスクリプト言語にまで興味を持ってくれる人は一人もいませんでした。
Gura Shot のプログラムは Gura スクリプトファイルをテキストのままで配布しましたから、テキストエディタさえあればプログラムを読める状態になっていたのです。
でも、アプリケーションですから、目的のために便利に使えればそれでよいと思うのはごく自然なことですね。

言語の認知度を上げる目的にはかないませんでしたが、このアプリケーションが多くの人に受け入れられたことは、Gura 言語がそういったプログラムを支えられるだけの汎用性を持っていることを実証できたことになります。
これは、十分満足できる結果でした。

-------------------------------------------------------------------------------
9. Developing a programming language alone is a long and complex process. What keeps you motivated to continue this path?

プログラムを趣味にしている人ならばだれでも、プログラミング言語や OS の開発に興味を持つと思います。
プログラミング言語や OS はプログラミング活動を大きく助けてくれますが、その代償にプログラマはそれらが定めるルールに従わなければいけません。
いつしか、そのルールを自分好みに作り上げたいという欲求が募って、開発の動機になっていくのでしょう。

しかし、自作のプログラミング言語に関する記事やブログを見かけることはありますが、その多くはごく基本的な処理を行う実験的なものにとどまります。
パーサやインストラクション生成・データ管理などのコアな部分を作ってしまうと、「言語を作る」という欲求は満たされてしまうので、これは仕方がないことかもしれません。
でも、私は自分の言語をそういう風にはしたくありませんでした。プログラミング言語というのは何らかの課題を解決するための手段であり、課題解決ができるレベルまで引き上げなければ
プログラミング言語とは呼べないと考えるからです。

そのためには、HTTP やソケットなどのネットワーク処理、正規表現や YAML, XML, JSON などのテキストデータ処理、JPEG や PNG などのイメージデータ処理、
また GUI などのユーザインタラクティブな処理ができるライブラリを開発しなければいけません。これは非常に時間と手間のかかるプロセスです。

でも、私はこういった要素を作ることが好きでした。自作の言語で処理できることが増えていくのを見るのは楽しいことです。
自分の手と頭を動かしていれば手持ちの資産を増やしていくことができるわけで、この快感に導かれて開発を進めていたのだと思います。

-------------------------------------------------------------------------------
10. Finally, what would you like to see happen with Gura-lang (or Gurax) in the future?

自分の興味に駆られて開発を進めてきただけなので、将来の展望は正直なところ何もないです。ほかの人に使ってもらいたいという欲望も昔ほど強烈ではなくなっていて、
私一人が便利に使えればそれでよいと考えていました。スクリプト言語というのはちょっとしたデータ処理をするのにとても便利で、
個人的な業務では Gura の後継である Gurax を日常的に使っています。ですから、自分の業務で必要な機能が生じれば、その都度機能向上を図っていくと思います。
...なんともマイナーで閉塞的な考えですね!

でも、それが昨日までの私のスタンスだったのですが、このインタビューを通じ考え方が変わりました。
熱心な宣伝活動をしていないにも関わらず、あなたのように興味を示してくれる人がいることを知ったからです。
他にも同じように、このプロジェクトをおもしろがってくれる人がいるかもしれないと想像すると、取り組み方が大きく違ってきます。
私一人の頭脳では実現がむつかしいパラレルコンピューティングなどへの応用も、ひょっとすると現実になっていくかもしれません。
